# pyOCD debugger
# Copyright (c) 2006-2013 Arm Limited
# Copyright (c) 2019 Monadnock Systems Ltd.
# Copyright (c) 2023 Nordic Semiconductor ASA
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import logging
from time import sleep

from ...core import exceptions
from ...coresight.coresight_target import CoreSightTarget
from ...core.target import Target
from ...flash.eraser import FlashEraser
from ...utility.timeout import Timeout
from ...coresight.cortex_m_v8m import CortexM_v8M

from typing import (Callable, TYPE_CHECKING, Union)
ProgressCallback = Callable[[Union[int, float]], None]

AHB_AP_APP_NUM = 0x0
AHB_AP_NET_NUM = 0x1
CTRL_AP_APP_NUM = 0x2
CTRL_AP_NET_NUM = 0x3

CTRL_AP_RESET = 0x000
CTRL_AP_ERASEALL = 0x004
CTRL_AP_ERASEALLSTATUS = 0x008
CTRL_AP_APPROTECT_DISABLE = 0x010
CTRL_AP_SECURE_APPROTECT_DISABLE = 0x014
CTRL_AP_ERASEPROTECTSTATUS = 0x018
CTRL_AP_ERASEPROTECTDISABLE = 0x01C
CTRL_AP_MAILBOX_TXDATA = 0x020
CTRL_AP_MAILBOX_TXSTATUS = 0x024
CTRL_AP_MAILBOX_RXDATA = 0x028
CTRL_AP_MAILBOX_RXSTATUS = 0x02C
CTRL_AP_IDR = 0x0FC

CTRL_AP_ERASEALLSTATUS_READY = 0x0
CTRL_AP_ERASEALLSTATUS_BUSY = 0x1

CTRL_AP_ERASEPROTECTSTATUS_MSK = 0x1

CTRL_AP_MAILBOX_STATUS_NODATAPENDING = 0x0
CTRL_AP_MAILBOX_STATUS_DATAPENDING = 0x1

CTRL_AP_RESET_NORESET = 0x0
CTRL_AP_RESET_RESET = 0x1

CTRL_AP_ERASEALL_NOOPERATION = 0x0
CTRL_AP_ERASEALL_ERASE = 0x1

CTRL_IDR_EXPECTED = 0x12880000

MASS_ERASE_TIMEOUT = 30.0

CSW_DEVICEEN =  0x00000040

nrf53_app_empty_image = [
  0x00, 0x00, 0x04, 0x20, 0x8d, 0x07, 0x00, 0x00, 0xb5, 0x07, 0x00, 0x00,
  0xb7, 0x07, 0x00, 0x00, 0xb9, 0x07, 0x00, 0x00, 0xbb, 0x07, 0x00, 0x00,
  0xbd, 0x07, 0x00, 0x00, 0xbf, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc1, 0x07, 0x00, 0x00,
  0xc3, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc5, 0x07, 0x00, 0x00,
  0xc7, 0x07, 0x00, 0x00, 0xc9, 0x07, 0x00, 0x00, 0xc9, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc9, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xc9, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xc9, 0x07, 0x00, 0x00, 0xc9, 0x07, 0x00, 0x00, 0xc9, 0x07, 0x00, 0x00,
  0xc9, 0x07, 0x00, 0x00, 0xc9, 0x07, 0x00, 0x00, 0xc9, 0x07, 0x00, 0x00,
  0xc9, 0x07, 0x00, 0x00, 0xc9, 0x07, 0x00, 0x00, 0xc9, 0x07, 0x00, 0x00,
  0xc9, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xc9, 0x07, 0x00, 0x00, 0xc9, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc9, 0x07, 0x00, 0x00, 0xc9, 0x07, 0x00, 0x00,
  0xc9, 0x07, 0x00, 0x00, 0xc9, 0x07, 0x00, 0x00, 0xc9, 0x07, 0x00, 0x00,
  0xc9, 0x07, 0x00, 0x00, 0xc9, 0x07, 0x00, 0x00, 0xc9, 0x07, 0x00, 0x00,
  0xc9, 0x07, 0x00, 0x00, 0xc9, 0x07, 0x00, 0x00, 0xc9, 0x07, 0x00, 0x00,
  0xc9, 0x07, 0x00, 0x00, 0xc9, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xc9, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc9, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc9, 0x07, 0x00, 0x00, 0xc9, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc9, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xc9, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc9, 0x07, 0x00, 0x00, 0xc9, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc9, 0x07, 0x00, 0x00, 0xc9, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc9, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xc9, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x10, 0xb5, 0x05, 0x4c, 0x23, 0x78, 0x33, 0xb9,
  0x04, 0x4b, 0x13, 0xb1, 0x04, 0x48, 0x00, 0xe0, 0x00, 0xbf, 0x01, 0x23,
  0x23, 0x70, 0x10, 0xbd, 0x3c, 0x04, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00,
  0x58, 0x0a, 0x00, 0x00, 0x08, 0xb5, 0x03, 0x4b, 0x1b, 0xb1, 0x03, 0x49,
  0x03, 0x48, 0x00, 0xe0, 0x00, 0xbf, 0x08, 0xbd, 0x00, 0x00, 0x00, 0x00,
  0x40, 0x04, 0x00, 0x20, 0x58, 0x0a, 0x00, 0x00, 0xa3, 0xf5, 0x80, 0x3a,
  0x70, 0x47, 0x00, 0xbf, 0x17, 0x4b, 0x00, 0x2b, 0x08, 0xbf, 0x13, 0x4b,
  0x9d, 0x46, 0xff, 0xf7, 0xf5, 0xff, 0x00, 0x21, 0x8b, 0x46, 0x0f, 0x46,
  0x13, 0x48, 0x14, 0x4a, 0x12, 0x1a, 0x00, 0xf0, 0x5f, 0xf8, 0x0e, 0x4b,
  0x00, 0x2b, 0x00, 0xd0, 0x98, 0x47, 0x0d, 0x4b, 0x00, 0x2b, 0x00, 0xd0,
  0x98, 0x47, 0x00, 0x20, 0x00, 0x21, 0x04, 0x00, 0x0d, 0x00, 0x0d, 0x48,
  0x00, 0x28, 0x02, 0xd0, 0x0c, 0x48, 0x00, 0xf0, 0x0d, 0xf9, 0x00, 0xf0,
  0x27, 0xf8, 0x20, 0x00, 0x29, 0x00, 0x00, 0xf0, 0x71, 0xf9, 0x00, 0xf0,
  0x11, 0xf8, 0x00, 0xbf, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x20, 0x3c, 0x04, 0x00, 0x20,
  0x5c, 0x04, 0x00, 0x20, 0xa5, 0x06, 0x00, 0x00, 0xb1, 0x06, 0x00, 0x00,
  0x08, 0xb5, 0x00, 0x21, 0x04, 0x46, 0x00, 0xf0, 0x8b, 0xf8, 0x04, 0x4b,
  0x18, 0x68, 0xc3, 0x6b, 0x03, 0xb1, 0x98, 0x47, 0x20, 0x46, 0x00, 0xf0,
  0x4f, 0xf9, 0x00, 0xbf, 0x4c, 0x0a, 0x00, 0x00, 0x70, 0xb5, 0x0d, 0x4e,
  0x0d, 0x4d, 0x76, 0x1b, 0xb6, 0x10, 0x06, 0xd0, 0x00, 0x24, 0x01, 0x34,
  0x55, 0xf8, 0x04, 0x3b, 0x98, 0x47, 0xa6, 0x42, 0xf9, 0xd1, 0x09, 0x4e,
  0x00, 0xf0, 0x9c, 0xfa, 0x08, 0x4d, 0x76, 0x1b, 0xb6, 0x10, 0x06, 0xd0,
  0x00, 0x24, 0x01, 0x34, 0x55, 0xf8, 0x04, 0x3b, 0x98, 0x47, 0xa6, 0x42,
  0xf9, 0xd1, 0x70, 0xbd, 0x30, 0x04, 0x00, 0x20, 0x30, 0x04, 0x00, 0x20,
  0x38, 0x04, 0x00, 0x20, 0x30, 0x04, 0x00, 0x20, 0x70, 0xb5, 0x86, 0x07,
  0x48, 0xd0, 0x54, 0x1e, 0x00, 0x2a, 0x3f, 0xd0, 0xca, 0xb2, 0x03, 0x46,
  0x01, 0xe0, 0x01, 0x3c, 0x3a, 0xd3, 0x03, 0xf8, 0x01, 0x2b, 0x9d, 0x07,
  0xf9, 0xd1, 0x03, 0x2c, 0x2d, 0xd9, 0xcd, 0xb2, 0x0f, 0x2c, 0x45, 0xea,
  0x05, 0x25, 0x45, 0xea, 0x05, 0x45, 0x36, 0xd9, 0xa4, 0xf1, 0x10, 0x0c,
  0x03, 0xf1, 0x20, 0x0e, 0x03, 0xf1, 0x10, 0x02, 0x2c, 0xf0, 0x0f, 0x06,
  0x4f, 0xea, 0x1c, 0x1c, 0xb6, 0x44, 0x42, 0xe9, 0x04, 0x55, 0x42, 0xe9,
  0x02, 0x55, 0x10, 0x32, 0x72, 0x45, 0xf8, 0xd1, 0x0c, 0xf1, 0x01, 0x02,
  0x14, 0xf0, 0x0c, 0x0f, 0x04, 0xf0, 0x0f, 0x0c, 0x03, 0xeb, 0x02, 0x12,
  0x13, 0xd0, 0xac, 0xf1, 0x04, 0x03, 0x23, 0xf0, 0x03, 0x03, 0x04, 0x33,
  0x13, 0x44, 0x42, 0xf8, 0x04, 0x5b, 0x93, 0x42, 0xfb, 0xd1, 0x0c, 0xf0,
  0x03, 0x04, 0x2c, 0xb1, 0xca, 0xb2, 0x1c, 0x44, 0x03, 0xf8, 0x01, 0x2b,
  0x9c, 0x42, 0xfb, 0xd1, 0x70, 0xbd, 0x64, 0x46, 0x13, 0x46, 0x00, 0x2c,
  0xf4, 0xd1, 0xf9, 0xe7, 0x03, 0x46, 0x14, 0x46, 0xbf, 0xe7, 0x1a, 0x46,
  0xa4, 0x46, 0xe0, 0xe7, 0x02, 0x4b, 0x13, 0xb1, 0x02, 0x48, 0x00, 0xf0,
  0x69, 0xb8, 0x70, 0x47, 0x00, 0x00, 0x00, 0x00, 0xb1, 0x06, 0x00, 0x00,
  0x2d, 0xe9, 0xf8, 0x4f, 0x2e, 0x4b, 0x83, 0x46, 0x0f, 0x46, 0x18, 0x68,
  0x2d, 0xed, 0x02, 0x8b, 0x00, 0xf0, 0x76, 0xf8, 0x2b, 0x4b, 0xd3, 0xf8,
  0x00, 0x80, 0xd8, 0xf8, 0x48, 0x61, 0xa6, 0xb1, 0x08, 0xee, 0x10, 0xba,
  0x4f, 0xf0, 0x01, 0x09, 0x4f, 0xf0, 0x00, 0x0a, 0x74, 0x68, 0x65, 0x1e,
  0x0b, 0xd4, 0x01, 0x34, 0x06, 0xeb, 0x84, 0x04, 0x7f, 0xb1, 0xd4, 0xf8,
  0x00, 0x31, 0xbb, 0x42, 0x0b, 0xd0, 0x01, 0x3d, 0x04, 0x3c, 0x6b, 0x1c,
  0xf6, 0xd1, 0x1d, 0x4b, 0xbd, 0xec, 0x02, 0x8b, 0x18, 0x68, 0xbd, 0xe8,
  0xf8, 0x4f, 0x00, 0xf0, 0x55, 0xb8, 0x73, 0x68, 0x22, 0x68, 0x01, 0x3b,
  0xab, 0x42, 0x0c, 0xbf, 0x75, 0x60, 0xc4, 0xf8, 0x00, 0xa0, 0x00, 0x2a,
  0xe9, 0xd0, 0x09, 0xfa, 0x05, 0xf1, 0xd6, 0xf8, 0x88, 0x01, 0xd6, 0xf8,
  0x04, 0xb0, 0x01, 0x42, 0x0b, 0xd1, 0x90, 0x47, 0x72, 0x68, 0x5a, 0x45,
  0x13, 0xd1, 0xd8, 0xf8, 0x48, 0x31, 0xb3, 0x42, 0xd9, 0xd0, 0x1e, 0x46,
  0x00, 0x2e, 0xcb, 0xd1, 0xd9, 0xe7, 0xd6, 0xf8, 0x8c, 0x01, 0x01, 0x42,
  0x0c, 0xd1, 0xd4, 0xf8, 0x80, 0x10, 0x18, 0xee, 0x10, 0x0a, 0x90, 0x47,
  0x72, 0x68, 0x5a, 0x45, 0xeb, 0xd0, 0xd8, 0xf8, 0x48, 0x61, 0x00, 0x2e,
  0xba, 0xd1, 0xc8, 0xe7, 0xd4, 0xf8, 0x80, 0x00, 0x90, 0x47, 0xdf, 0xe7,
  0x28, 0x04, 0x00, 0x20, 0x4c, 0x0a, 0x00, 0x00, 0x00, 0x23, 0x01, 0x46,
  0x1a, 0x46, 0x18, 0x46, 0x00, 0xf0, 0x1a, 0xb8, 0x38, 0xb5, 0x08, 0x4b,
  0x08, 0x4d, 0x5b, 0x1b, 0x9c, 0x10, 0x07, 0xd0, 0x04, 0x3b, 0x1d, 0x44,
  0x01, 0x3c, 0x55, 0xf8, 0x04, 0x39, 0x98, 0x47, 0x00, 0x2c, 0xf9, 0xd1,
  0xbd, 0xe8, 0x38, 0x40, 0x00, 0xf0, 0xb6, 0xb9, 0x3c, 0x04, 0x00, 0x20,
  0x38, 0x04, 0x00, 0x20, 0x70, 0x47, 0x00, 0xbf, 0x70, 0x47, 0x00, 0xbf,
  0x2d, 0xe9, 0xf0, 0x47, 0xdf, 0xf8, 0x84, 0xa0, 0x06, 0x46, 0x98, 0x46,
  0x0f, 0x46, 0xda, 0xf8, 0x00, 0x00, 0x91, 0x46, 0xff, 0xf7, 0xf0, 0xff,
  0x1b, 0x4b, 0x1b, 0x68, 0xd3, 0xf8, 0x48, 0x41, 0x34, 0xb3, 0x65, 0x68,
  0x1f, 0x2d, 0x28, 0xdc, 0x5e, 0xb9, 0x6b, 0x1c, 0x02, 0x35, 0xda, 0xf8,
  0x00, 0x00, 0x63, 0x60, 0x44, 0xf8, 0x25, 0x70, 0xff, 0xf7, 0xe0, 0xff,
  0x00, 0x20, 0xbd, 0xe8, 0xf0, 0x87, 0x04, 0xeb, 0x85, 0x01, 0x01, 0x23,
  0x02, 0x2e, 0xc1, 0xf8, 0x88, 0x90, 0x03, 0xfa, 0x05, 0xf3, 0xd4, 0xf8,
  0x88, 0x21, 0x42, 0xea, 0x03, 0x02, 0xc4, 0xf8, 0x88, 0x21, 0xc1, 0xf8,
  0x08, 0x81, 0xe2, 0xd1, 0xd4, 0xf8, 0x8c, 0x21, 0x13, 0x43, 0xc4, 0xf8,
  0x8c, 0x31, 0xdc, 0xe7, 0x03, 0xf5, 0xa6, 0x74, 0xc3, 0xf8, 0x48, 0x41,
  0xd3, 0xe7, 0xda, 0xf8, 0x00, 0x00, 0xff, 0xf7, 0xbd, 0xff, 0x4f, 0xf0,
  0xff, 0x30, 0xda, 0xe7, 0x4c, 0x0a, 0x00, 0x00, 0x28, 0x04, 0x00, 0x20,
  0xfe, 0xe7, 0x00, 0xbf, 0x02, 0x4b, 0x03, 0x4a, 0xc3, 0xf8, 0x44, 0x25,
  0xfe, 0xe7, 0x00, 0xbf, 0x00, 0x60, 0x00, 0x40, 0xfa, 0x50, 0xfa, 0x50,
  0x06, 0x49, 0x07, 0x4a, 0x07, 0x4b, 0x9b, 0x1a, 0x03, 0xdd, 0x04, 0x3b,
  0xc8, 0x58, 0xd0, 0x50, 0xfb, 0xdc, 0x00, 0xf0, 0x15, 0xf8, 0xff, 0xf7,
  0x51, 0xfe, 0x00, 0x00, 0x68, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
  0x3c, 0x04, 0x00, 0x20, 0xfe, 0xe7, 0xfe, 0xe7, 0xfe, 0xe7, 0xfe, 0xe7,
  0xfe, 0xe7, 0xfe, 0xe7, 0xfe, 0xe7, 0xfe, 0xe7, 0xfe, 0xe7, 0xfe, 0xe7,
  0xfe, 0xe7, 0x00, 0xbf, 0x4f, 0xf4, 0x7f, 0x03, 0xd3, 0xf8, 0x30, 0x21,
  0xd3, 0xf8, 0x34, 0x31, 0x07, 0x2a, 0x00, 0xf0, 0xf6, 0x80, 0x00, 0x22,
  0x06, 0xe0, 0xd3, 0xf8, 0x00, 0x13, 0xd3, 0xf8, 0x04, 0x33, 0x20, 0x2a,
  0x0b, 0x60, 0x07, 0xd0, 0xd3, 0x00, 0x03, 0xf5, 0x7f, 0x03, 0xd3, 0xf8,
  0x00, 0x13, 0x01, 0x32, 0x01, 0x31, 0xf0, 0xd1, 0x4f, 0xf4, 0x7f, 0x03,
  0xd3, 0xf8, 0x30, 0x21, 0xd3, 0xf8, 0x34, 0x31, 0x07, 0x2a, 0x00, 0xf0,
  0xcb, 0x80, 0x4f, 0xf4, 0x7f, 0x03, 0xd3, 0xf8, 0x30, 0x21, 0xd3, 0xf8,
  0x34, 0x31, 0x07, 0x2a, 0x00, 0xf0, 0xaf, 0x80, 0x4f, 0xf4, 0x7f, 0x03,
  0xd3, 0xf8, 0x30, 0x21, 0xd3, 0xf8, 0x34, 0x31, 0x07, 0x2a, 0x00, 0xf0,
  0x98, 0x80, 0x4f, 0xf4, 0x7f, 0x03, 0xd3, 0xf8, 0x30, 0x21, 0xd3, 0xf8,
  0x34, 0x31, 0x07, 0x2a, 0x58, 0xd0, 0x4f, 0xf4, 0x7f, 0x03, 0xd3, 0xf8,
  0x30, 0x21, 0xd3, 0xf8, 0x34, 0x31, 0x07, 0x2a, 0x09, 0xd1, 0x4f, 0xf0,
  0x50, 0x23, 0xd3, 0xf8, 0x00, 0x24, 0xd2, 0x07, 0x44, 0xbf, 0x6f, 0xf0,
  0x01, 0x02, 0xc3, 0xf8, 0x00, 0x24, 0x4f, 0xf4, 0x7f, 0x03, 0xd3, 0xf8,
  0x30, 0x21, 0xd3, 0xf8, 0x34, 0x31, 0x07, 0x2a, 0x69, 0xd0, 0x4f, 0xf4,
  0x7f, 0x03, 0xd3, 0xf8, 0x30, 0x21, 0xd3, 0xf8, 0x34, 0x31, 0x07, 0x2a,
  0x49, 0xd0, 0x5c, 0x4b, 0x5c, 0x48, 0x19, 0x46, 0x03, 0xf1, 0xf8, 0x52,
  0x09, 0x68, 0x04, 0x3b, 0x02, 0xf5, 0x0f, 0x22, 0x83, 0x42, 0x11, 0x60,
  0xf5, 0xd1, 0x58, 0x48, 0x58, 0x4b, 0xd0, 0xf8, 0xfc, 0x27, 0x58, 0x49,
  0x22, 0xf0, 0x10, 0x02, 0xc0, 0xf8, 0xfc, 0x27, 0xd3, 0xf8, 0x8c, 0x20,
  0x42, 0xf4, 0x40, 0x62, 0xc3, 0xf8, 0x8c, 0x20, 0x08, 0x68, 0x53, 0x4a,
  0xc2, 0xf8, 0x44, 0x05, 0xc9, 0x69, 0xc2, 0xf8, 0x4c, 0x15, 0xd3, 0xf8,
  0x88, 0x20, 0x42, 0xf4, 0x70, 0x02, 0xc3, 0xf8, 0x88, 0x20, 0xbf, 0xf3,
  0x4f, 0x8f, 0xbf, 0xf3, 0x6f, 0x8f, 0x4f, 0xf0, 0x50, 0x22, 0xd2, 0xf8,
  0x58, 0x25, 0x4a, 0x4b, 0x4a, 0x49, 0x02, 0xf0, 0x03, 0x02, 0xd3, 0x40,
  0x0b, 0x60, 0x70, 0x47, 0x02, 0x3b, 0x03, 0x2b, 0xa3, 0xd8, 0x47, 0x4a,
  0xd3, 0x5c, 0x00, 0x2b, 0x9f, 0xd0, 0x4f, 0xf0, 0x50, 0x23, 0xd3, 0xf8,
  0x00, 0x24, 0xd1, 0x07, 0x99, 0xd5, 0x00, 0x22, 0xc3, 0xf8, 0x14, 0x21,
  0xc3, 0xf8, 0x18, 0x21, 0x93, 0xe7, 0x40, 0x4b, 0xd3, 0xf8, 0x20, 0x34,
  0x00, 0x2b, 0xb0, 0xda, 0x4f, 0xf0, 0x50, 0x22, 0x03, 0x21, 0x01, 0x23,
  0xc2, 0xf8, 0x18, 0x15, 0x93, 0x60, 0xd2, 0xf8, 0x04, 0x31, 0x00, 0x2b,
  0xfb, 0xd0, 0x01, 0x23, 0x00, 0x21, 0xc2, 0xf8, 0x04, 0x11, 0xd3, 0x60,
  0xc2, 0xf8, 0x18, 0x35, 0x9d, 0xe7, 0x02, 0x3b, 0x03, 0x2b, 0x92, 0xd8,
  0x31, 0x4a, 0xd3, 0x5c, 0x00, 0x2b, 0x8e, 0xd0, 0x65, 0x22, 0x31, 0x4b,
  0xc3, 0xf8, 0x0c, 0x27, 0x89, 0xe7, 0x02, 0x3b, 0x03, 0x2b, 0x3f, 0xf6,
  0x64, 0xaf, 0x2e, 0x4a, 0xd3, 0x5c, 0x00, 0x2b, 0x3f, 0xf4, 0x5f, 0xaf,
  0x00, 0x22, 0x29, 0x4b, 0xc3, 0xf8, 0x4c, 0x25, 0x59, 0xe7, 0x02, 0x3b,
  0x03, 0x2b, 0x3f, 0xf6, 0x4d, 0xaf, 0x24, 0x4a, 0xd3, 0x5c, 0x00, 0x2b,
  0x3f, 0xf4, 0x48, 0xaf, 0x4f, 0xf0, 0x50, 0x23, 0x01, 0x22, 0x24, 0x49,
  0x24, 0x48, 0xc1, 0xf8, 0x30, 0x05, 0xc3, 0xf8, 0x58, 0x25, 0x3d, 0xe7,
  0x02, 0x3b, 0x03, 0x2b, 0x3f, 0xf6, 0x31, 0xaf, 0x1a, 0x4a, 0xd3, 0x5c,
  0x00, 0x2b, 0x3f, 0xf4, 0x2c, 0xaf, 0x29, 0x21, 0x03, 0x22, 0x19, 0x4b,
  0xc3, 0xf8, 0x0c, 0x17, 0xc3, 0xf8, 0x3c, 0x27, 0x23, 0xe7, 0x02, 0x3b,
  0x03, 0x2b, 0x3f, 0xf6, 0x06, 0xaf, 0x12, 0x4a, 0xd3, 0x5c, 0x00, 0x2b,
  0x3f, 0xf4, 0x01, 0xaf, 0x11, 0x4b, 0xd3, 0xf8, 0x20, 0x2a, 0x00, 0x2a,
  0x7f, 0xf4, 0xfb, 0xae, 0x0d, 0x20, 0x01, 0x21, 0xc3, 0xf8, 0x20, 0x0a,
  0xc3, 0xf8, 0x1c, 0x19, 0xc3, 0xf8, 0x1c, 0x29, 0xf1, 0xe6, 0x00, 0xbf,
  0xfc, 0x0f, 0xff, 0x00, 0xfc, 0xff, 0xfe, 0x00, 0x00, 0x30, 0x00, 0x50,
  0x00, 0xed, 0x00, 0xe0, 0x00, 0x80, 0xff, 0x00, 0x00, 0x60, 0x00, 0x50,
  0x00, 0x20, 0xa1, 0x07, 0x2c, 0x04, 0x00, 0x20, 0x50, 0x0a, 0x00, 0x00,
  0x00, 0x20, 0x03, 0x50, 0x00, 0x40, 0x00, 0x50, 0x54, 0x0a, 0x00, 0x00,
  0x00, 0x90, 0x03, 0x50, 0x44, 0x00, 0xef, 0xbe, 0xf8, 0xb5, 0x00, 0xbf,
  0xf8, 0xbc, 0x08, 0xbc, 0x9e, 0x46, 0x70, 0x47, 0xf8, 0xb5, 0x00, 0xbf,
  0xf8, 0xbc, 0x08, 0xbc, 0x9e, 0x46, 0x70, 0x47, 0x00, 0x00, 0x00, 0x20,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xe0, 0xf9, 0xff, 0x7f, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xec, 0x02, 0x00, 0x20, 0x54, 0x03, 0x00, 0x20,
  0xbc, 0x03, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x33, 0xcd, 0xab,
  0x34, 0x12, 0x6d, 0xe6, 0xec, 0xde, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x04, 0x00, 0x20,
  0x00, 0x90, 0xd0, 0x03, 0xc9, 0x05, 0x00, 0x00, 0x25, 0x04, 0x00, 0x00,
  0x01, 0x04, 0x00, 0x00
]

nrf53_net_empty_image = [
    0x00, 0x00, 0x01, 0x21, 0xcd, 0x05, 0x00, 0x01, 0xf5, 0x05, 0x00, 0x01, 0xf7, 0x05, 0x00, 0x01,
    0xf9, 0x05, 0x00, 0x01, 0xfb, 0x05, 0x00, 0x01, 0xfd, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x05, 0x00, 0x01,
    0x01, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x03, 0x06, 0x00, 0x01, 0x05, 0x06, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x07, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x07, 0x06, 0x00, 0x01, 0x07, 0x06, 0x00, 0x01, 0x07, 0x06, 0x00, 0x01, 0x07, 0x06, 0x00, 0x01,
    0x07, 0x06, 0x00, 0x01, 0x07, 0x06, 0x00, 0x01, 0x07, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x07, 0x06, 0x00, 0x01, 0x07, 0x06, 0x00, 0x01, 0x07, 0x06, 0x00, 0x01, 0x07, 0x06, 0x00, 0x01,
    0x07, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x07, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x07, 0x06, 0x00, 0x01, 0x07, 0x06, 0x00, 0x01, 0x07, 0x06, 0x00, 0x01, 0x07, 0x06, 0x00, 0x01,
    0x07, 0x06, 0x00, 0x01, 0x07, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x10, 0xb5, 0x05, 0x4c, 0x23, 0x78, 0x33, 0xb9, 0x04, 0x4b, 0x13, 0xb1,
    0x04, 0x48, 0x00, 0xe0, 0x00, 0xbf, 0x01, 0x23, 0x23, 0x70, 0x10, 0xbd, 0x3c, 0x04, 0x00, 0x21,
    0x00, 0x00, 0x00, 0x00, 0xc0, 0x06, 0x00, 0x01, 0x08, 0xb5, 0x03, 0x4b, 0x1b, 0xb1, 0x03, 0x49,
    0x03, 0x48, 0x00, 0xe0, 0x00, 0xbf, 0x08, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x40, 0x04, 0x00, 0x21,
    0xc0, 0x06, 0x00, 0x01, 0xa3, 0xf5, 0x80, 0x3a, 0x70, 0x47, 0x00, 0xbf, 0x17, 0x4b, 0x00, 0x2b,
    0x08, 0xbf, 0x13, 0x4b, 0x9d, 0x46, 0xff, 0xf7, 0xf5, 0xff, 0x00, 0x21, 0x8b, 0x46, 0x0f, 0x46,
    0x13, 0x48, 0x14, 0x4a, 0x12, 0x1a, 0x00, 0xf0, 0x5f, 0xf8, 0x0e, 0x4b, 0x00, 0x2b, 0x00, 0xd0,
    0x98, 0x47, 0x0d, 0x4b, 0x00, 0x2b, 0x00, 0xd0, 0x98, 0x47, 0x00, 0x20, 0x00, 0x21, 0x04, 0x00,
    0x0d, 0x00, 0x0d, 0x48, 0x00, 0x28, 0x02, 0xd0, 0x0c, 0x48, 0x00, 0xf0, 0x0b, 0xf9, 0x00, 0xf0,
    0x27, 0xf8, 0x20, 0x00, 0x29, 0x00, 0x00, 0xf0, 0x6f, 0xf9, 0x00, 0xf0, 0x11, 0xf8, 0x00, 0xbf,
    0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x21,
    0x3c, 0x04, 0x00, 0x21, 0x5c, 0x04, 0x00, 0x21, 0xe5, 0x04, 0x00, 0x01, 0xf1, 0x04, 0x00, 0x01,
    0x08, 0xb5, 0x00, 0x21, 0x04, 0x46, 0x00, 0xf0, 0x8b, 0xf8, 0x04, 0x4b, 0x18, 0x68, 0xc3, 0x6b,
    0x03, 0xb1, 0x98, 0x47, 0x20, 0x46, 0x00, 0xf0, 0x4d, 0xf9, 0x00, 0xbf, 0xb8, 0x06, 0x00, 0x01,
    0x70, 0xb5, 0x0d, 0x4e, 0x0d, 0x4d, 0x76, 0x1b, 0xb6, 0x10, 0x06, 0xd0, 0x00, 0x24, 0x01, 0x34,
    0x55, 0xf8, 0x04, 0x3b, 0x98, 0x47, 0xa6, 0x42, 0xf9, 0xd1, 0x09, 0x4e, 0x00, 0xf0, 0xb0, 0xf9,
    0x08, 0x4d, 0x76, 0x1b, 0xb6, 0x10, 0x06, 0xd0, 0x00, 0x24, 0x01, 0x34, 0x55, 0xf8, 0x04, 0x3b,
    0x98, 0x47, 0xa6, 0x42, 0xf9, 0xd1, 0x70, 0xbd, 0x30, 0x04, 0x00, 0x21, 0x30, 0x04, 0x00, 0x21,
    0x38, 0x04, 0x00, 0x21, 0x30, 0x04, 0x00, 0x21, 0x70, 0xb5, 0x86, 0x07, 0x48, 0xd0, 0x54, 0x1e,
    0x00, 0x2a, 0x3f, 0xd0, 0xca, 0xb2, 0x03, 0x46, 0x01, 0xe0, 0x01, 0x3c, 0x3a, 0xd3, 0x03, 0xf8,
    0x01, 0x2b, 0x9d, 0x07, 0xf9, 0xd1, 0x03, 0x2c, 0x2d, 0xd9, 0xcd, 0xb2, 0x0f, 0x2c, 0x45, 0xea,
    0x05, 0x25, 0x45, 0xea, 0x05, 0x45, 0x36, 0xd9, 0xa4, 0xf1, 0x10, 0x0c, 0x03, 0xf1, 0x20, 0x0e,
    0x03, 0xf1, 0x10, 0x02, 0x2c, 0xf0, 0x0f, 0x06, 0x4f, 0xea, 0x1c, 0x1c, 0xb6, 0x44, 0x42, 0xe9,
    0x04, 0x55, 0x42, 0xe9, 0x02, 0x55, 0x10, 0x32, 0x72, 0x45, 0xf8, 0xd1, 0x0c, 0xf1, 0x01, 0x02,
    0x14, 0xf0, 0x0c, 0x0f, 0x04, 0xf0, 0x0f, 0x0c, 0x03, 0xeb, 0x02, 0x12, 0x13, 0xd0, 0xac, 0xf1,
    0x04, 0x03, 0x23, 0xf0, 0x03, 0x03, 0x04, 0x33, 0x13, 0x44, 0x42, 0xf8, 0x04, 0x5b, 0x93, 0x42,
    0xfb, 0xd1, 0x0c, 0xf0, 0x03, 0x04, 0x2c, 0xb1, 0xca, 0xb2, 0x1c, 0x44, 0x03, 0xf8, 0x01, 0x2b,
    0x9c, 0x42, 0xfb, 0xd1, 0x70, 0xbd, 0x64, 0x46, 0x13, 0x46, 0x00, 0x2c, 0xf4, 0xd1, 0xf9, 0xe7,
    0x03, 0x46, 0x14, 0x46, 0xbf, 0xe7, 0x1a, 0x46, 0xa4, 0x46, 0xe0, 0xe7, 0x02, 0x4b, 0x13, 0xb1,
    0x02, 0x48, 0x00, 0xf0, 0x67, 0xb8, 0x70, 0x47, 0x00, 0x00, 0x00, 0x00, 0xf1, 0x04, 0x00, 0x01,
    0x2e, 0x4b, 0x2d, 0xe9, 0xf0, 0x4f, 0x83, 0x46, 0x83, 0xb0, 0x18, 0x68, 0x0f, 0x46, 0xcd, 0xf8,
    0x04, 0xb0, 0x00, 0xf0, 0x73, 0xf8, 0x2a, 0x4b, 0xd3, 0xf8, 0x00, 0x80, 0xd8, 0xf8, 0x48, 0x61,
    0x96, 0xb1, 0x4f, 0xf0, 0x01, 0x09, 0x4f, 0xf0, 0x00, 0x0a, 0x74, 0x68, 0x65, 0x1e, 0x0b, 0xd4,
    0x01, 0x34, 0x06, 0xeb, 0x84, 0x04, 0x77, 0xb1, 0xd4, 0xf8, 0x00, 0x31, 0xbb, 0x42, 0x0a, 0xd0,
    0x01, 0x3d, 0x04, 0x3c, 0x6b, 0x1c, 0xf6, 0xd1, 0x1c, 0x4b, 0x18, 0x68, 0x03, 0xb0, 0xbd, 0xe8,
    0xf0, 0x4f, 0x00, 0xf0, 0x55, 0xb8, 0x73, 0x68, 0x22, 0x68, 0x01, 0x3b, 0xab, 0x42, 0x0c, 0xbf,
    0x75, 0x60, 0xc4, 0xf8, 0x00, 0xa0, 0x00, 0x2a, 0xea, 0xd0, 0x09, 0xfa, 0x05, 0xf1, 0xd6, 0xf8,
    0x88, 0x01, 0xd6, 0xf8, 0x04, 0xb0, 0x01, 0x42, 0x0b, 0xd1, 0x90, 0x47, 0x72, 0x68, 0x5a, 0x45,
    0x12, 0xd1, 0xd8, 0xf8, 0x48, 0x31, 0xb3, 0x42, 0xda, 0xd0, 0x1e, 0x46, 0x00, 0x2e, 0xcc, 0xd1,
    0xda, 0xe7, 0xd6, 0xf8, 0x8c, 0x01, 0x01, 0x42, 0x0b, 0xd1, 0xd4, 0xf8, 0x80, 0x10, 0x01, 0x98,
    0x90, 0x47, 0x72, 0x68, 0x5a, 0x45, 0xec, 0xd0, 0xd8, 0xf8, 0x48, 0x61, 0x00, 0x2e, 0xbc, 0xd1,
    0xca, 0xe7, 0xd4, 0xf8, 0x80, 0x00, 0x90, 0x47, 0xe0, 0xe7, 0x00, 0xbf, 0x28, 0x04, 0x00, 0x21,
    0xb8, 0x06, 0x00, 0x01, 0x00, 0x23, 0x01, 0x46, 0x1a, 0x46, 0x18, 0x46, 0x00, 0xf0, 0x1a, 0xb8,
    0x38, 0xb5, 0x08, 0x4b, 0x08, 0x4d, 0x5b, 0x1b, 0x9c, 0x10, 0x07, 0xd0, 0x04, 0x3b, 0x1d, 0x44,
    0x01, 0x3c, 0x55, 0xf8, 0x04, 0x39, 0x98, 0x47, 0x00, 0x2c, 0xf9, 0xd1, 0xbd, 0xe8, 0x38, 0x40,
    0x00, 0xf0, 0xcc, 0xb8, 0x3c, 0x04, 0x00, 0x21, 0x38, 0x04, 0x00, 0x21, 0x70, 0x47, 0x00, 0xbf,
    0x70, 0x47, 0x00, 0xbf, 0x2d, 0xe9, 0xf0, 0x47, 0xdf, 0xf8, 0x80, 0xa0, 0x06, 0x46, 0x98, 0x46,
    0x0f, 0x46, 0xda, 0xf8, 0x00, 0x00, 0x91, 0x46, 0xff, 0xf7, 0xf0, 0xff, 0x1c, 0x4b, 0x1b, 0x68,
    0xd3, 0xf8, 0x48, 0x41, 0x34, 0xb3, 0x65, 0x68, 0x1f, 0x2d, 0x28, 0xdc, 0x5e, 0xb9, 0x6b, 0x1c,
    0x02, 0x35, 0xda, 0xf8, 0x00, 0x00, 0x63, 0x60, 0x44, 0xf8, 0x25, 0x70, 0xff, 0xf7, 0xe0, 0xff,
    0x00, 0x20, 0xbd, 0xe8, 0xf0, 0x87, 0x04, 0xeb, 0x85, 0x01, 0x01, 0x23, 0x02, 0x2e, 0xc1, 0xf8,
    0x88, 0x90, 0x03, 0xfa, 0x05, 0xf3, 0xd4, 0xf8, 0x88, 0x21, 0x42, 0xea, 0x03, 0x02, 0xc4, 0xf8,
    0x88, 0x21, 0xc1, 0xf8, 0x08, 0x81, 0xe2, 0xd1, 0xd4, 0xf8, 0x8c, 0x21, 0x13, 0x43, 0xc4, 0xf8,
    0x8c, 0x31, 0xdc, 0xe7, 0x03, 0xf5, 0xa6, 0x74, 0xc3, 0xf8, 0x48, 0x41, 0xd3, 0xe7, 0xda, 0xf8,
    0x00, 0x00, 0xff, 0xf7, 0xbd, 0xff, 0x4f, 0xf0, 0xff, 0x30, 0xda, 0xe7, 0x28, 0x04, 0x00, 0x21,
    0xb8, 0x06, 0x00, 0x01, 0xfe, 0xe7, 0x00, 0xbf, 0x02, 0x4b, 0x03, 0x4a, 0xc3, 0xf8, 0x44, 0x25,
    0xfe, 0xe7, 0x00, 0xbf, 0x00, 0x60, 0x00, 0x41, 0xfa, 0x50, 0xfa, 0x50, 0x06, 0x49, 0x07, 0x4a,
    0x07, 0x4b, 0x9b, 0x1a, 0x03, 0xdd, 0x04, 0x3b, 0xc8, 0x58, 0xd0, 0x50, 0xfb, 0xdc, 0x00, 0xf0,
    0x13, 0xf8, 0xff, 0xf7, 0x53, 0xfe, 0x00, 0x00, 0xe8, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x21,
    0x3c, 0x04, 0x00, 0x21, 0xfe, 0xe7, 0xfe, 0xe7, 0xfe, 0xe7, 0xfe, 0xe7, 0xfe, 0xe7, 0xfe, 0xe7,
    0xfe, 0xe7, 0xfe, 0xe7, 0xfe, 0xe7, 0xfe, 0xe7, 0x00, 0x22, 0x06, 0xe0, 0xd3, 0xf8, 0x00, 0x13,
    0xd3, 0xf8, 0x04, 0x33, 0x20, 0x2a, 0x0b, 0x60, 0x09, 0xd0, 0xd3, 0x00, 0x03, 0xf1, 0xff, 0x73,
    0x03, 0xf5, 0x80, 0x33, 0xd3, 0xf8, 0x00, 0x13, 0x01, 0x32, 0x01, 0x31, 0xee, 0xd1, 0x15, 0x4b,
    0xd3, 0xf8, 0x30, 0x21, 0x07, 0x2a, 0x08, 0xd0, 0x13, 0x4b, 0x14, 0x49, 0x18, 0x68, 0x14, 0x4a,
    0x14, 0x4b, 0xc1, 0xf8, 0x44, 0x05, 0x1a, 0x60, 0x70, 0x47, 0xd3, 0xf8, 0x34, 0x31, 0x02, 0x3b,
    0x03, 0x2b, 0x0c, 0xd8, 0x10, 0x4a, 0xd3, 0x5c, 0x4b, 0xb1, 0x10, 0x4b, 0xd3, 0xf8, 0x00, 0x24,
    0xd2, 0x07, 0x04, 0xd5, 0x00, 0x22, 0xc3, 0xf8, 0x14, 0x21, 0xc3, 0xf8, 0x18, 0x21, 0x0b, 0x4b,
    0xd3, 0xf8, 0x00, 0x24, 0xd1, 0x07, 0xdf, 0xd5, 0x6f, 0xf0, 0x01, 0x02, 0xc3, 0xf8, 0x00, 0x24,
    0xda, 0xe7, 0x00, 0xbf, 0x00, 0x00, 0xff, 0x01, 0x00, 0x80, 0xff, 0x01, 0x00, 0x60, 0x00, 0x41,
    0x00, 0x90, 0xd0, 0x03, 0x2c, 0x04, 0x00, 0x21, 0xbc, 0x06, 0x00, 0x01, 0x00, 0x50, 0x00, 0x41,
    0xf8, 0xb5, 0x00, 0xbf, 0xf8, 0xbc, 0x08, 0xbc, 0x9e, 0x46, 0x70, 0x47, 0xf8, 0xb5, 0x00, 0xbf,
    0xf8, 0xbc, 0x08, 0xbc, 0x9e, 0x46, 0x70, 0x47, 0x00, 0x00, 0x00, 0x21, 0x01, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xa4, 0xfb, 0xff, 0x7f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0x02, 0x00, 0x21,
    0x54, 0x03, 0x00, 0x21, 0xbc, 0x03, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x33, 0xcd, 0xab, 0x34, 0x12, 0x6d, 0xe6,
    0xec, 0xde, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x58, 0x04, 0x00, 0x21, 0x00, 0x90, 0xd0, 0x03, 0x0d, 0x04, 0x00, 0x01, 0x69, 0x02, 0x00, 0x01,
    0x45, 0x02, 0x00, 0x01]


LOG = logging.getLogger(__name__)


def word_to_bytes(wrd):
    result = []
    for i in range(4):
        result.append((wrd >> (8*i)) & 0xFF)
    return bytes(result)

def bytes_to_word(bts):
    result = 0
    for i, b in enumerate(bts):
        result |= b << (8*i)
    return result

class NRF53Core(CortexM_v8M):
    def __init__(self, rootTarget, ap, memory_map=None, core_num=0, cmpid=None, address=None, ctrl_ap=None):
        super().__init__(rootTarget, ap, memory_map, core_num, cmpid, address)
        self.ctrl_ap = ctrl_ap

    def reset(self, reset_type=None):
        if reset_type == Target.ResetType.SW_CORE:
            self.ctrl_ap.write_reg(CTRL_AP_RESET, CTRL_AP_RESET_RESET)
            self.ctrl_ap.write_reg(CTRL_AP_RESET, CTRL_AP_RESET_NORESET)
            sleep(0.2)
        else:
            super().reset(reset_type)

class NRF53(CoreSightTarget):

    VENDOR = "Nordic Semiconductor"

    def __init__(self, session, memory_map=None):
        super(NRF53, self).__init__(session, memory_map)
        self.ctrl_ap_app = None
        self.ctrl_ap_net = None
        self.was_locked_app = False
        self.was_locked_net = False
        self.default_reset_type = Target.ResetType.HW

    def create_init_sequence(self):
        seq = super(NRF53, self).create_init_sequence()

        # Must check whether security is enabled, and potentially auto-unlock, before
        # any init tasks that require system bus access.
        seq.wrap_task('discovery',
            lambda seq: seq.insert_before('find_components',
                              ('check_ctrl_ap_idr', self.check_ctrl_ap_idr),
                              ('check_device_family', self.check_device_family),
                          )
            )
        seq.wrap_task('discovery',
            lambda seq: seq.replace_task('create_cores', self.create_cores)
        )
        seq.wrap_task('discovery',
            lambda seq: seq.insert_after('create_cores',
                              ('persist_unlock_app', self.persist_unlock_app),
                              ('persist_unlock_net', self.persist_unlock_net),
                          )
            )
        seq.insert_before('post_connect_hook',
                          ('check_part_info', self.check_part_info))

        return seq

    def check_ctrl_ap_idr(self):
        self.ctrl_ap_app = self.dp.aps[CTRL_AP_APP_NUM]
        self.ctrl_ap_net = self.dp.aps[CTRL_AP_NET_NUM]
        self.was_locked_app = not self.ap_is_enabled(AHB_AP_APP_NUM)

        # Check CTRL-AP IDs.
        if self.ctrl_ap_app.idr != CTRL_IDR_EXPECTED:
            LOG.error("%s: bad CTRL-AP IDR (is 0x%08x)", self.part_number, self.ctrl_ap_app.idr)
        if self.ctrl_ap_net.idr != CTRL_IDR_EXPECTED:
            LOG.error("%s: bad CTRL-AP IDR (is 0x%08x)", self.part_number, self.ctrl_ap_net.idr)

    def ap_is_enabled(self, ap_num):
        csw = self.dp.aps[ap_num].read_reg(0)
        return csw & CSW_DEVICEEN

    def create_cores(self):
        """@brief Prepare and create cores
        """
        self.check_flash_security_app()
        core_app = NRF53Core(self.session, self.aps[0], self.memory_map, 0, self.ctrl_ap_app)
        core_app.default_reset_type = self.ResetType.SW_CORE
        self.aps[AHB_AP_APP_NUM].core = core_app
        core_app.init()
        self.add_core(core_app)

        self.check_flash_security_net()
        core_net = NRF53Core(self.session, self.aps[1], self.memory_map, 1, self.ctrl_ap_net)
        core_net.default_reset_type = self.ResetType.SW_CORE
        self.aps[AHB_AP_NET_NUM].core = core_net
        core_net.init()
        self.add_core(core_net)

        core_app.other_core = core_net
        core_net.other_core = core_app

    def check_device_family(self):
        """@brief Check whether the device is what we expect.
        """

        target_id = self.dp.read_dp(0x24)
        if target_id & 0xFFF != 0x289:
            LOG.error(f"This doesn't look like a Nordic Semiconductor device!")
        if target_id & 0xF0000 != 0x70000:
            LOG.error(f"This doesn't look like an nRF53 devcice!")



    def check_flash_security_app(self):
        """@brief Check security and unlock app core.

        This init task determines whether the core is locked (APPROTECT enabled). If it is,
        and if auto unlock is enabled, then perform a mass erase to unlock the core.

        This init task runs *before* cores are created.
        """
        if self.was_locked_app:
            if self.session.options.get('auto_unlock'):
                LOG.warning("%s APP CORE APPROTECT enabled: will try to unlock via mass erase", self.part_number)

                self.mass_erase_app()

                # Check if AP was enabled
                if not self.ap_is_enabled(AHB_AP_APP_NUM):
                    raise exceptions.TargetError("unable to unlock device")

                self._discoverer._create_1_ap(AHB_AP_APP_NUM)
            else:
                LOG.warning("%s APP CORE APPROTECT enabled: not automatically unlocking", self.part_number)
        else:
            LOG.info("%s APP not in secure state", self.part_number)


    def check_flash_security_net(self):
        """@brief Enable and unlock net core if needed.

        This init task determines whether the core is locked (APPROTECT enabled). If it is,
        and if auto unlock is enabled, then perform a mass erase to unlock the core.

        This init task runs *before* cores are created.
        """
        # Release NETWORK.FORCEOFF
        self.write32(0x50005614, 0)

        self.was_locked_net = not self.ap_is_enabled(AHB_AP_NET_NUM)

        if not self.ap_is_enabled(AHB_AP_NET_NUM):
            if self.session.options.get('auto_unlock'):
                LOG.warning("%s NET CORE APPROTECT enabled: will try to unlock via mass erase", self.part_number)
                self.mass_erase_net()
                self._discoverer._create_1_ap(AHB_AP_NET_NUM)
        else:
            LOG.info("%s NET not in secure state", self.part_number)


    def is_eraseprotected(self, ctrl_ap):
        status = ctrl_ap.read_reg(CTRL_AP_ERASEPROTECTSTATUS)
        return status & CTRL_AP_ERASEPROTECTSTATUS_MSK == 0

    def mass_erase(self):
        self.mass_erase_app()
        self.mass_erase_net()

    def mass_erase_app(self):
        if self.is_eraseprotected(self.ctrl_ap_app):
            LOG.warning("ERASEPROTECT is enabled.")
            if self.was_locked_app:
                LOG.error("If the firmware supports unlocking with a known 32-bit key,")
                LOG.error("then this is the only way to recover the device.")
                return False
            else:
                LOG.warning("Performing a chip erase instead.")
                eraser = FlashEraser(self.session, FlashEraser.Mode.CHIP)
                eraser._log_chip_erase = False
                eraser.erase()
                return True
        self.mass_erase_ctrl_ap(self.ctrl_ap_app)


    def mass_erase_net(self):
        self.mass_erase_ctrl_ap(self.ctrl_ap_net)

    def mass_erase_ctrl_ap(self, ctrl_ap):
        # See Nordic Whitepaper nWP-027 for magic numbers and order of operations from the vendor
        ctrl_ap.write_reg(CTRL_AP_ERASEALL, CTRL_AP_ERASEALL_ERASE)
        with Timeout(MASS_ERASE_TIMEOUT) as to:
            while to.check():
                status = ctrl_ap.read_reg(CTRL_AP_ERASEALLSTATUS)
                if status == CTRL_AP_ERASEALLSTATUS_READY:
                    break
                sleep(0.5)
            else:
                # Timed out
                LOG.error("Mass erase timeout waiting for ERASEALLSTATUS")
                return False
        sleep(0.01)
        ctrl_ap.write_reg(CTRL_AP_RESET, CTRL_AP_RESET_RESET)
        ctrl_ap.write_reg(CTRL_AP_RESET, CTRL_AP_RESET_NORESET)
        sleep(0.2)
        return True

    def check_part_info(self):
        partno = self.read32(0x00FF020C)
        variant = self.read32(0x00FF0210)

        LOG.info(f"This appears to be an nRF{partno:X} " +
                 f"{word_to_bytes(variant)[::-1].decode('ASCII', errors='ignore')} ")

    def persist_unlock_app(self):
        if self.session.options.get('auto_unlock'):
            # Write Unprotected to UICR.APPROTECT
            self.write_uicr_app(0x00FF8000, 0x50FA50FA)

            # Write Unprotected to UICR.SECUREAPPROTECT
            self.write_uicr_app(0x00FF801C, 0x50FA50FA)

            if self.was_locked_app:
                # write unlock image
                LOG.info("writing empty APP image to persist unlock")
                self.write_flash_app(0, nrf53_app_empty_image)

    def persist_unlock_net(self):
        if self.session.options.get('auto_unlock'):
            # Write Unprotected to UICR.APPROTECT
            self.write_uicr_net(0x01FF8000, 0x50FA50FA)

            if self.was_locked_net:
                # write unlock image
                LOG.info("writing empty NET image to persist unlock")
                self.write_flash_net(0x01000000, nrf53_net_empty_image)

    def write_uicr_app(self, addr: int, value: int):
        return self._write_uicr(addr, value, self.cores[0], 0x50039000)

    def write_uicr_net(self, addr: int, value: int):
        return self._write_uicr(addr, value, self.cores[1], 0x41080000)

    def write_flash_app(self, addr: int, bytes):
        return self._write_flash(addr, bytes, self.cores[0], 0x50039000)

    def write_flash_net(self, addr: int, bytes):
        return self._write_flash(addr, bytes, self.cores[1], 0x41080000)

    def _write_uicr(self, addr: int, value: int, core, nvmc_base):
        current_value = core.read32(addr)
        if ((current_value & value) != value) and (current_value != 0xFFFFFFFF):
            raise exceptions.TargetError("cannot write UICR value, mass_erase needed")

        core.write32(nvmc_base + 0x504, 1)  # NVMC.CONFIG = WriteEnable
        self._wait_nvmc_ready(core, nvmc_base)
        core.write32(addr, value)
        self._wait_nvmc_ready(core, nvmc_base)
        core.write32(nvmc_base + 0x504, 0)  # NVMC.CONFIG = ReadOnly
        self._wait_nvmc_ready(core, nvmc_base)

    def _write_flash(self, addr: int, bytes, core, nvmc_base):
        assert len(bytes) % 4 == 0, "only full words can be written"
        core.write32(nvmc_base + 0x504, 1)  # NVMC.CONFIG = WriteEnable
        self._wait_nvmc_ready(core, nvmc_base)
        for off in range(0, len(bytes), 4):
            core.write32(addr+off, bytes_to_word(bytes[off:off+4]))
            self._wait_nvmc_readynext(core, nvmc_base)
        core.write32(nvmc_base + 0x504, 0)  # NVMC.CONFIG = ReadOnly
        self._wait_nvmc_ready(core, nvmc_base)

    def _wait_nvmc_ready(self, core, nvmc_base):
        with Timeout(MASS_ERASE_TIMEOUT) as to:
            while to.check():
                if core.read32(nvmc_base + 0x400) != 0x00000000:  # NVMC.READY != BUSY
                    break
            else:
                raise exceptions.TargetError("wait for NVMC timed out")

    def _wait_nvmc_readynext(self, core, nvmc_base):
        with Timeout(MASS_ERASE_TIMEOUT) as to:
            while to.check():
                if core.read32(nvmc_base + 0x408) != 0x00000000:  # NVMC.READYNEXT != BUSY
                    break
            else:
                raise exceptions.TargetError("wait for NVMC timed out")
